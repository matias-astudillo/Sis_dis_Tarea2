version: '3.8'
services:
  # Generador de tráfico que simula la compra de productos
  traffic_generator:
    build: ./traffic_generator
    depends_on:
      - grpc_client
    networks:
      - mynetwork

  # cliente grpc
  grpc_client:
    build: ./grpc_client
    depends_on:
      - order_management
    ports:
      - "5008:5008"
    networks:
      - mynetwork

  # Microservicio de gestión de pedidos que actúa como servidor gRPC
  order_management:
    build: ./order_management
    networks:
      - mynetwork
    ports:
      - "5000:5000"
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER: kafka:9092

  # Microservicio de gestión de los estados de los pedidos
  state_manager:
    build: ./state_manager
    networks:
      - mynetwork
    ports:
      - "5009:5009"
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER: kafka:9092

  # Microservicios para cada estado del pedido
  processing_service:
    build: ./processing_service
    networks:
      - mynetwork
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER: kafka:9092
    ports:
      - "5001:5001"

  preparing_service:
    build: ./preparing_service
    networks:
      - mynetwork
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER: kafka:9092
    ports:
      - "5002:5002"

  shipping_service:
    build: ./shipping_service
    networks:
      - mynetwork
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER: kafka:9092
    ports:
      - "5003:5003"

  delivered_service:
    build: ./delivered_service
    networks:
      - mynetwork
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER: kafka:9092
    ports:
      - "5004:5004"

  notification_service:
    build: ./notification_service
    networks:
      - mynetwork
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER: kafka:9092
    ports:
      - "5005:5005"

  # Kafka como mensaje broker
  kafka:
    image: bitnami/kafka:latest
    networks:
      - mynetwork
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
      - elasticsearch

  # Zookeeper para Kafka
  zookeeper:
    image: bitnami/zookeeper:latest
    networks:
      - mynetwork
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"

  # Elasticsearch para almacenar métricas
  elasticsearch:
    image: elasticsearch:8.15.2
    networks:
      - mynetwork
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"

  # Interfaz gráfica para poder mostrar los datos almacenados en elasticsearch
  kibana:
    image: kibana:8.9.0
    networks:
      - mynetwork
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch

networks:
  mynetwork:
    driver: bridge

